// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  bio       String?
  avatar    String?
  website   String?
  location  String?
  verified  Boolean  @default(false)
  pro       Boolean  @default(false)
  coins     Int      @default(100)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     Post[]
  likes     Like[]
  comments  Comment[]
  follows   Follow[] @relation("UserFollows")
  followers Follow[] @relation("UserFollowers")
  sessions  Session[]
  notifications Notification[]

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String
  image       String?
  aiModel     String?
  prompt      String?
  isAI        Boolean  @default(false)
  published   Boolean  @default(true)
  likesCount  Int      @default(0)
  commentsCount Int    @default(0)
  sharesCount Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  hashtags    PostHashtag[]

  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  
  createdAt DateTime @default(now())
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Comment {
  id     String @id @default(cuid())
  userId String
  postId String
  content String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String
  
  createdAt   DateTime @default(now())
  
  follower    User @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  following   User @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Hashtag {
  id    String @id @default(cuid())
  name  String @unique
  count Int    @default(0)
  
  posts PostHashtag[]

  @@map("hashtags")
}

model PostHashtag {
  id        String @id @default(cuid())
  postId    String
  hashtagId String
  
  post    Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([postId, hashtagId])
  @@map("post_hashtags")
}

model Notification {
  id      String  @id @default(cuid())
  userId  String
  type    String  // like, comment, follow, system
  title   String
  message String
  read    Boolean @default(false)
  
  createdAt DateTime @default(now())
  
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
